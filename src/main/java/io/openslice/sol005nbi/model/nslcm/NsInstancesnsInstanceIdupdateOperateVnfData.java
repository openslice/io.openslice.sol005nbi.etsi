/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.3.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openslice.sol005nbi.model.nslcm;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * This type represents a VNF instance for which the operational state  needs to be changed and the requested new state. It shall comply with the provisions defined in Table 6.5.3.31-1. 
 */
@Schema(description = "This type represents a VNF instance for which the operational state  needs to be changed and the requested new state. It shall comply with the provisions defined in Table 6.5.3.31-1. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-28T00:48:29.393+02:00[Europe/Athens]")
public class NsInstancesnsInstanceIdupdateOperateVnfData {
  @JsonProperty("vnfInstanceId")
  private String vnfInstanceId = null;

  /**
   * STARTED - The VNF instance is up and running. STOPPED - The VNF instance has been shut down. 
   */
  public enum ChangeStateToEnum {
    STARTED("STARTED"),
    STOPPED("STOPPED");

    private String value;

    ChangeStateToEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ChangeStateToEnum fromValue(String text) {
      for (ChangeStateToEnum b : ChangeStateToEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("changeStateTo")
  private ChangeStateToEnum changeStateTo = null;

  /**
   * * FORCEFUL: The VNFM will stop the VNF immediately after accepting the   request. * GRACEFUL: The VNFM will first arrange to take the VNF out of service   after accepting the request. Once that operation is successful or once   the timer value specified in the \&quot;gracefulStopTimeout\&quot; attribute   expires, the VNFM will stop the VNF. 
   */
  public enum StopTypeEnum {
    FORCEFUL("FORCEFUL"),
    GRACEFUL("GRACEFUL");

    private String value;

    StopTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StopTypeEnum fromValue(String text) {
      for (StopTypeEnum b : StopTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("stopType")
  private StopTypeEnum stopType = null;

  @JsonProperty("gracefulStopTimeout")
  private Integer gracefulStopTimeout = null;

  @JsonProperty("additionalParam")
  private Object additionalParam = null;

  public NsInstancesnsInstanceIdupdateOperateVnfData vnfInstanceId(String vnfInstanceId) {
    this.vnfInstanceId = vnfInstanceId;
    return this;
  }

   /**
   * An identifier with the intention of being globally unique. 
   * @return vnfInstanceId
  **/
  @Schema(required = true, description = "An identifier with the intention of being globally unique. ")
  public String getVnfInstanceId() {
    return vnfInstanceId;
  }

  public void setVnfInstanceId(String vnfInstanceId) {
    this.vnfInstanceId = vnfInstanceId;
  }

  public NsInstancesnsInstanceIdupdateOperateVnfData changeStateTo(ChangeStateToEnum changeStateTo) {
    this.changeStateTo = changeStateTo;
    return this;
  }

   /**
   * STARTED - The VNF instance is up and running. STOPPED - The VNF instance has been shut down. 
   * @return changeStateTo
  **/
  @Schema(required = true, description = "STARTED - The VNF instance is up and running. STOPPED - The VNF instance has been shut down. ")
  public ChangeStateToEnum getChangeStateTo() {
    return changeStateTo;
  }

  public void setChangeStateTo(ChangeStateToEnum changeStateTo) {
    this.changeStateTo = changeStateTo;
  }

  public NsInstancesnsInstanceIdupdateOperateVnfData stopType(StopTypeEnum stopType) {
    this.stopType = stopType;
    return this;
  }

   /**
   * * FORCEFUL: The VNFM will stop the VNF immediately after accepting the   request. * GRACEFUL: The VNFM will first arrange to take the VNF out of service   after accepting the request. Once that operation is successful or once   the timer value specified in the \&quot;gracefulStopTimeout\&quot; attribute   expires, the VNFM will stop the VNF. 
   * @return stopType
  **/
  @Schema(description = "* FORCEFUL: The VNFM will stop the VNF immediately after accepting the   request. * GRACEFUL: The VNFM will first arrange to take the VNF out of service   after accepting the request. Once that operation is successful or once   the timer value specified in the \"gracefulStopTimeout\" attribute   expires, the VNFM will stop the VNF. ")
  public StopTypeEnum getStopType() {
    return stopType;
  }

  public void setStopType(StopTypeEnum stopType) {
    this.stopType = stopType;
  }

  public NsInstancesnsInstanceIdupdateOperateVnfData gracefulStopTimeout(Integer gracefulStopTimeout) {
    this.gracefulStopTimeout = gracefulStopTimeout;
    return this;
  }

   /**
   * The time interval (in seconds) to wait for the VNF to be taken out of service during graceful stop, before stopping the VNF. 
   * @return gracefulStopTimeout
  **/
  @Schema(description = "The time interval (in seconds) to wait for the VNF to be taken out of service during graceful stop, before stopping the VNF. ")
  public Integer getGracefulStopTimeout() {
    return gracefulStopTimeout;
  }

  public void setGracefulStopTimeout(Integer gracefulStopTimeout) {
    this.gracefulStopTimeout = gracefulStopTimeout;
  }

  public NsInstancesnsInstanceIdupdateOperateVnfData additionalParam(Object additionalParam) {
    this.additionalParam = additionalParam;
    return this;
  }

   /**
   * This type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key- value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 7159. 
   * @return additionalParam
  **/
  @Schema(description = "This type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key- value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 7159. ")
  public Object getAdditionalParam() {
    return additionalParam;
  }

  public void setAdditionalParam(Object additionalParam) {
    this.additionalParam = additionalParam;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NsInstancesnsInstanceIdupdateOperateVnfData nsInstancesnsInstanceIdupdateOperateVnfData = (NsInstancesnsInstanceIdupdateOperateVnfData) o;
    return Objects.equals(this.vnfInstanceId, nsInstancesnsInstanceIdupdateOperateVnfData.vnfInstanceId) &&
        Objects.equals(this.changeStateTo, nsInstancesnsInstanceIdupdateOperateVnfData.changeStateTo) &&
        Objects.equals(this.stopType, nsInstancesnsInstanceIdupdateOperateVnfData.stopType) &&
        Objects.equals(this.gracefulStopTimeout, nsInstancesnsInstanceIdupdateOperateVnfData.gracefulStopTimeout) &&
        Objects.equals(this.additionalParam, nsInstancesnsInstanceIdupdateOperateVnfData.additionalParam);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vnfInstanceId, changeStateTo, stopType, gracefulStopTimeout, additionalParam);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NsInstancesnsInstanceIdupdateOperateVnfData {\n");
    
    sb.append("    vnfInstanceId: ").append(toIndentedString(vnfInstanceId)).append("\n");
    sb.append("    changeStateTo: ").append(toIndentedString(changeStateTo)).append("\n");
    sb.append("    stopType: ").append(toIndentedString(stopType)).append("\n");
    sb.append("    gracefulStopTimeout: ").append(toIndentedString(gracefulStopTimeout)).append("\n");
    sb.append("    additionalParam: ").append(toIndentedString(additionalParam)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
