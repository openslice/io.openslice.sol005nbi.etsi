/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.3.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openslice.sol005nbi.model.nslcm;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Body1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-28T00:48:29.393+02:00[Europe/Athens]")
public class Body1 {
  @JsonProperty("nsFlavourId")
  private String nsFlavourId = null;

  @JsonProperty("sapData")
  private List<NsInstancesnsInstanceIdinstantiateSapData> sapData = null;

  @JsonProperty("addpnfData")
  private List<NsInstancesnsInstanceIdinstantiateAddpnfData> addpnfData = null;

  @JsonProperty("vnfInstanceData")
  private List<NsInstancesnsInstanceIdinstantiateVnfInstanceData> vnfInstanceData = null;

  @JsonProperty("nestedNsInstanceData")
  private List<NsInstancesnsInstanceIdinstantiateNestedNsInstanceData> nestedNsInstanceData = null;

  @JsonProperty("locationConstraints")
  private List<NsInstancesnsInstanceIdinstantiateLocationConstraints1> locationConstraints = null;

  @JsonProperty("additionalParamsForNs")
  private Object additionalParamsForNs = null;

  @JsonProperty("additionalParamForNestedNs")
  private List<NsInstancesnsInstanceIdinstantiateAdditionalParamForNestedNs> additionalParamForNestedNs = null;

  @JsonProperty("additionalParamsForVnf")
  private List<NsInstancesnsInstanceIdinstantiateAdditionalParamsForVnf> additionalParamsForVnf = null;

  @JsonProperty("startTime")
  private Object startTime = null;

  @JsonProperty("nsInstantiationLevelId")
  private String nsInstantiationLevelId = null;

  @JsonProperty("additionalAffinityOrAntiAffinityRule")
  private List<NsInstancesNsInstanceAdditionalAffinityOrAntiAffinityRule> additionalAffinityOrAntiAffinityRule = null;

  public Body1 nsFlavourId(String nsFlavourId) {
    this.nsFlavourId = nsFlavourId;
    return this;
  }

   /**
   * An identifier that is unique within a NS descriptor. Representation: string of variable length. 
   * @return nsFlavourId
  **/
  @Schema(required = true, description = "An identifier that is unique within a NS descriptor. Representation: string of variable length. ")
  public String getNsFlavourId() {
    return nsFlavourId;
  }

  public void setNsFlavourId(String nsFlavourId) {
    this.nsFlavourId = nsFlavourId;
  }

  public Body1 sapData(List<NsInstancesnsInstanceIdinstantiateSapData> sapData) {
    this.sapData = sapData;
    return this;
  }

  public Body1 addSapDataItem(NsInstancesnsInstanceIdinstantiateSapData sapDataItem) {
    if (this.sapData == null) {
      this.sapData = new ArrayList<>();
    }
    this.sapData.add(sapDataItem);
    return this;
  }

   /**
   * Create data concerning the SAPs of this NS. 
   * @return sapData
  **/
  @Schema(description = "Create data concerning the SAPs of this NS. ")
  public List<NsInstancesnsInstanceIdinstantiateSapData> getSapData() {
    return sapData;
  }

  public void setSapData(List<NsInstancesnsInstanceIdinstantiateSapData> sapData) {
    this.sapData = sapData;
  }

  public Body1 addpnfData(List<NsInstancesnsInstanceIdinstantiateAddpnfData> addpnfData) {
    this.addpnfData = addpnfData;
    return this;
  }

  public Body1 addAddpnfDataItem(NsInstancesnsInstanceIdinstantiateAddpnfData addpnfDataItem) {
    if (this.addpnfData == null) {
      this.addpnfData = new ArrayList<>();
    }
    this.addpnfData.add(addpnfDataItem);
    return this;
  }

   /**
   * Information on the PNF(s) that are part of this NS. 
   * @return addpnfData
  **/
  @Schema(description = "Information on the PNF(s) that are part of this NS. ")
  public List<NsInstancesnsInstanceIdinstantiateAddpnfData> getAddpnfData() {
    return addpnfData;
  }

  public void setAddpnfData(List<NsInstancesnsInstanceIdinstantiateAddpnfData> addpnfData) {
    this.addpnfData = addpnfData;
  }

  public Body1 vnfInstanceData(List<NsInstancesnsInstanceIdinstantiateVnfInstanceData> vnfInstanceData) {
    this.vnfInstanceData = vnfInstanceData;
    return this;
  }

  public Body1 addVnfInstanceDataItem(NsInstancesnsInstanceIdinstantiateVnfInstanceData vnfInstanceDataItem) {
    if (this.vnfInstanceData == null) {
      this.vnfInstanceData = new ArrayList<>();
    }
    this.vnfInstanceData.add(vnfInstanceDataItem);
    return this;
  }

   /**
   * Specify an existing VNF instance to be used in the NS. If needed, the VNF Profile to be used for this VNF instance is also provided. The DF of the VNF instance shall match the VNF DF  present in the associated VNF Profile. 
   * @return vnfInstanceData
  **/
  @Schema(description = "Specify an existing VNF instance to be used in the NS. If needed, the VNF Profile to be used for this VNF instance is also provided. The DF of the VNF instance shall match the VNF DF  present in the associated VNF Profile. ")
  public List<NsInstancesnsInstanceIdinstantiateVnfInstanceData> getVnfInstanceData() {
    return vnfInstanceData;
  }

  public void setVnfInstanceData(List<NsInstancesnsInstanceIdinstantiateVnfInstanceData> vnfInstanceData) {
    this.vnfInstanceData = vnfInstanceData;
  }

  public Body1 nestedNsInstanceData(List<NsInstancesnsInstanceIdinstantiateNestedNsInstanceData> nestedNsInstanceData) {
    this.nestedNsInstanceData = nestedNsInstanceData;
    return this;
  }

  public Body1 addNestedNsInstanceDataItem(NsInstancesnsInstanceIdinstantiateNestedNsInstanceData nestedNsInstanceDataItem) {
    if (this.nestedNsInstanceData == null) {
      this.nestedNsInstanceData = new ArrayList<>();
    }
    this.nestedNsInstanceData.add(nestedNsInstanceDataItem);
    return this;
  }

   /**
   * Specify an existing NS instance to be used as a nested NS within the NS. If needed, the NS Profile to be used for this nested NS  instance is also provided. NOTE 2: The NS DF of each nested NS shall be one of the  allowed flavours in the associated NSD (as referenced in the nestedNsd attribute of the NSD of the NS to be instantiated). NOTE 3: The NSD of each referenced NSs (i.e. each  nestedInstanceId) shall match the one of the nested NSD in  the composite NSD. 
   * @return nestedNsInstanceData
  **/
  @Schema(description = "Specify an existing NS instance to be used as a nested NS within the NS. If needed, the NS Profile to be used for this nested NS  instance is also provided. NOTE 2: The NS DF of each nested NS shall be one of the  allowed flavours in the associated NSD (as referenced in the nestedNsd attribute of the NSD of the NS to be instantiated). NOTE 3: The NSD of each referenced NSs (i.e. each  nestedInstanceId) shall match the one of the nested NSD in  the composite NSD. ")
  public List<NsInstancesnsInstanceIdinstantiateNestedNsInstanceData> getNestedNsInstanceData() {
    return nestedNsInstanceData;
  }

  public void setNestedNsInstanceData(List<NsInstancesnsInstanceIdinstantiateNestedNsInstanceData> nestedNsInstanceData) {
    this.nestedNsInstanceData = nestedNsInstanceData;
  }

  public Body1 locationConstraints(List<NsInstancesnsInstanceIdinstantiateLocationConstraints1> locationConstraints) {
    this.locationConstraints = locationConstraints;
    return this;
  }

  public Body1 addLocationConstraintsItem(NsInstancesnsInstanceIdinstantiateLocationConstraints1 locationConstraintsItem) {
    if (this.locationConstraints == null) {
      this.locationConstraints = new ArrayList<>();
    }
    this.locationConstraints.add(locationConstraintsItem);
    return this;
  }

   /**
   * Defines the location constraints for the VNF to be instantiated as part of the NS instantiation. An example can be a constraint for the VNF to be in a specific geographic location.. 
   * @return locationConstraints
  **/
  @Schema(description = "Defines the location constraints for the VNF to be instantiated as part of the NS instantiation. An example can be a constraint for the VNF to be in a specific geographic location.. ")
  public List<NsInstancesnsInstanceIdinstantiateLocationConstraints1> getLocationConstraints() {
    return locationConstraints;
  }

  public void setLocationConstraints(List<NsInstancesnsInstanceIdinstantiateLocationConstraints1> locationConstraints) {
    this.locationConstraints = locationConstraints;
  }

  public Body1 additionalParamsForNs(Object additionalParamsForNs) {
    this.additionalParamsForNs = additionalParamsForNs;
    return this;
  }

   /**
   * This type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key- value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 7159. 
   * @return additionalParamsForNs
  **/
  @Schema(description = "This type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key- value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 7159. ")
  public Object getAdditionalParamsForNs() {
    return additionalParamsForNs;
  }

  public void setAdditionalParamsForNs(Object additionalParamsForNs) {
    this.additionalParamsForNs = additionalParamsForNs;
  }

  public Body1 additionalParamForNestedNs(List<NsInstancesnsInstanceIdinstantiateAdditionalParamForNestedNs> additionalParamForNestedNs) {
    this.additionalParamForNestedNs = additionalParamForNestedNs;
    return this;
  }

  public Body1 addAdditionalParamForNestedNsItem(NsInstancesnsInstanceIdinstantiateAdditionalParamForNestedNs additionalParamForNestedNsItem) {
    if (this.additionalParamForNestedNs == null) {
      this.additionalParamForNestedNs = new ArrayList<>();
    }
    this.additionalParamForNestedNs.add(additionalParamForNestedNsItem);
    return this;
  }

   /**
   * Allows the OSS/BSS to provide additional parameter(s) per nested NS instance (as opposed to the composite NS level, which is covered in additionalParamForNs, and as opposed to the VNF level, which is covered in additionalParamForVnf). This is for nested NS instances that are to be created by the NFVO as part of the NS instantiation and not for existing nested NS instances that are referenced for reuse. 
   * @return additionalParamForNestedNs
  **/
  @Schema(description = "Allows the OSS/BSS to provide additional parameter(s) per nested NS instance (as opposed to the composite NS level, which is covered in additionalParamForNs, and as opposed to the VNF level, which is covered in additionalParamForVnf). This is for nested NS instances that are to be created by the NFVO as part of the NS instantiation and not for existing nested NS instances that are referenced for reuse. ")
  public List<NsInstancesnsInstanceIdinstantiateAdditionalParamForNestedNs> getAdditionalParamForNestedNs() {
    return additionalParamForNestedNs;
  }

  public void setAdditionalParamForNestedNs(List<NsInstancesnsInstanceIdinstantiateAdditionalParamForNestedNs> additionalParamForNestedNs) {
    this.additionalParamForNestedNs = additionalParamForNestedNs;
  }

  public Body1 additionalParamsForVnf(List<NsInstancesnsInstanceIdinstantiateAdditionalParamsForVnf> additionalParamsForVnf) {
    this.additionalParamsForVnf = additionalParamsForVnf;
    return this;
  }

  public Body1 addAdditionalParamsForVnfItem(NsInstancesnsInstanceIdinstantiateAdditionalParamsForVnf additionalParamsForVnfItem) {
    if (this.additionalParamsForVnf == null) {
      this.additionalParamsForVnf = new ArrayList<>();
    }
    this.additionalParamsForVnf.add(additionalParamsForVnfItem);
    return this;
  }

   /**
   * Allows the OSS/BSS to provide additional parameter(s) per VNF instance (as opposed to the composite NS level,  which is covered in additionalParamsForNs and as opposed  to the nested NS level, which is covered in  additionalParamForNestedNs). This is for VNFs that are  to be created by the NFVO as part of the NS instantiation  and not for existing VNF that are referenced for reuse. 
   * @return additionalParamsForVnf
  **/
  @Schema(description = "Allows the OSS/BSS to provide additional parameter(s) per VNF instance (as opposed to the composite NS level,  which is covered in additionalParamsForNs and as opposed  to the nested NS level, which is covered in  additionalParamForNestedNs). This is for VNFs that are  to be created by the NFVO as part of the NS instantiation  and not for existing VNF that are referenced for reuse. ")
  public List<NsInstancesnsInstanceIdinstantiateAdditionalParamsForVnf> getAdditionalParamsForVnf() {
    return additionalParamsForVnf;
  }

  public void setAdditionalParamsForVnf(List<NsInstancesnsInstanceIdinstantiateAdditionalParamsForVnf> additionalParamsForVnf) {
    this.additionalParamsForVnf = additionalParamsForVnf;
  }

  public Body1 startTime(Object startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Date-time stamp. Representation: String formatted according toas defined by the date-time production in IETF RFC 3339. 
   * @return startTime
  **/
  @Schema(description = "Date-time stamp. Representation: String formatted according toas defined by the date-time production in IETF RFC 3339. ")
  public Object getStartTime() {
    return startTime;
  }

  public void setStartTime(Object startTime) {
    this.startTime = startTime;
  }

  public Body1 nsInstantiationLevelId(String nsInstantiationLevelId) {
    this.nsInstantiationLevelId = nsInstantiationLevelId;
    return this;
  }

   /**
   * An identifier that is unique within a NS descriptor. Representation: string of variable length. 
   * @return nsInstantiationLevelId
  **/
  @Schema(description = "An identifier that is unique within a NS descriptor. Representation: string of variable length. ")
  public String getNsInstantiationLevelId() {
    return nsInstantiationLevelId;
  }

  public void setNsInstantiationLevelId(String nsInstantiationLevelId) {
    this.nsInstantiationLevelId = nsInstantiationLevelId;
  }

  public Body1 additionalAffinityOrAntiAffinityRule(List<NsInstancesNsInstanceAdditionalAffinityOrAntiAffinityRule> additionalAffinityOrAntiAffinityRule) {
    this.additionalAffinityOrAntiAffinityRule = additionalAffinityOrAntiAffinityRule;
    return this;
  }

  public Body1 addAdditionalAffinityOrAntiAffinityRuleItem(NsInstancesNsInstanceAdditionalAffinityOrAntiAffinityRule additionalAffinityOrAntiAffinityRuleItem) {
    if (this.additionalAffinityOrAntiAffinityRule == null) {
      this.additionalAffinityOrAntiAffinityRule = new ArrayList<>();
    }
    this.additionalAffinityOrAntiAffinityRule.add(additionalAffinityOrAntiAffinityRuleItem);
    return this;
  }

   /**
   * Specifies additional affinity or anti-affinity constraint for the VNF instances to be instantiated as part of the NS instantiation. Shall not conflict with rules already specified in the NSD. 
   * @return additionalAffinityOrAntiAffinityRule
  **/
  @Schema(description = "Specifies additional affinity or anti-affinity constraint for the VNF instances to be instantiated as part of the NS instantiation. Shall not conflict with rules already specified in the NSD. ")
  public List<NsInstancesNsInstanceAdditionalAffinityOrAntiAffinityRule> getAdditionalAffinityOrAntiAffinityRule() {
    return additionalAffinityOrAntiAffinityRule;
  }

  public void setAdditionalAffinityOrAntiAffinityRule(List<NsInstancesNsInstanceAdditionalAffinityOrAntiAffinityRule> additionalAffinityOrAntiAffinityRule) {
    this.additionalAffinityOrAntiAffinityRule = additionalAffinityOrAntiAffinityRule;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body1 body1 = (Body1) o;
    return Objects.equals(this.nsFlavourId, body1.nsFlavourId) &&
        Objects.equals(this.sapData, body1.sapData) &&
        Objects.equals(this.addpnfData, body1.addpnfData) &&
        Objects.equals(this.vnfInstanceData, body1.vnfInstanceData) &&
        Objects.equals(this.nestedNsInstanceData, body1.nestedNsInstanceData) &&
        Objects.equals(this.locationConstraints, body1.locationConstraints) &&
        Objects.equals(this.additionalParamsForNs, body1.additionalParamsForNs) &&
        Objects.equals(this.additionalParamForNestedNs, body1.additionalParamForNestedNs) &&
        Objects.equals(this.additionalParamsForVnf, body1.additionalParamsForVnf) &&
        Objects.equals(this.startTime, body1.startTime) &&
        Objects.equals(this.nsInstantiationLevelId, body1.nsInstantiationLevelId) &&
        Objects.equals(this.additionalAffinityOrAntiAffinityRule, body1.additionalAffinityOrAntiAffinityRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nsFlavourId, sapData, addpnfData, vnfInstanceData, nestedNsInstanceData, locationConstraints, additionalParamsForNs, additionalParamForNestedNs, additionalParamsForVnf, startTime, nsInstantiationLevelId, additionalAffinityOrAntiAffinityRule);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body1 {\n");
    
    sb.append("    nsFlavourId: ").append(toIndentedString(nsFlavourId)).append("\n");
    sb.append("    sapData: ").append(toIndentedString(sapData)).append("\n");
    sb.append("    addpnfData: ").append(toIndentedString(addpnfData)).append("\n");
    sb.append("    vnfInstanceData: ").append(toIndentedString(vnfInstanceData)).append("\n");
    sb.append("    nestedNsInstanceData: ").append(toIndentedString(nestedNsInstanceData)).append("\n");
    sb.append("    locationConstraints: ").append(toIndentedString(locationConstraints)).append("\n");
    sb.append("    additionalParamsForNs: ").append(toIndentedString(additionalParamsForNs)).append("\n");
    sb.append("    additionalParamForNestedNs: ").append(toIndentedString(additionalParamForNestedNs)).append("\n");
    sb.append("    additionalParamsForVnf: ").append(toIndentedString(additionalParamsForVnf)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    nsInstantiationLevelId: ").append(toIndentedString(nsInstantiationLevelId)).append("\n");
    sb.append("    additionalAffinityOrAntiAffinityRule: ").append(toIndentedString(additionalAffinityOrAntiAffinityRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
