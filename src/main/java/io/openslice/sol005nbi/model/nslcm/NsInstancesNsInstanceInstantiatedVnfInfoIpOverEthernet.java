/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.3.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openslice.sol005nbi.model.nslcm;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * This type represents information about a network address that has been assigned. It shall comply with the provisions defined in Table 6.5.3.18-1. 
 */
@Schema(description = "This type represents information about a network address that has been assigned. It shall comply with the provisions defined in Table 6.5.3.18-1. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-28T00:48:29.393+02:00[Europe/Athens]")
public class NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet {
  @JsonProperty("macAddress")
  private String macAddress = null;

  @JsonProperty("ipAddresses")
  private List<NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernetIpAddresses> ipAddresses = new ArrayList<>();

  /**
   * The type of the IP addresses 
   */
  public enum TypeEnum {
    PV4("PV4"),
    PV6("PV6");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("addresses")
  private String addresses = null;

  @JsonProperty("isDynamic")
  private Boolean isDynamic = null;

  @JsonProperty("addressRange")
  private NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernetAddressRange1 addressRange = null;

  @JsonProperty("minAddress")
  private String minAddress = null;

  @JsonProperty("maxAddress")
  private String maxAddress = null;

  @JsonProperty("subnetId")
  private String subnetId = null;

  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

   /**
   * A MAC address. Representation: string that consists of groups of two hexadecimal digits, separated by hyphens or colons. 
   * @return macAddress
  **/
  @Schema(required = true, description = "A MAC address. Representation: string that consists of groups of two hexadecimal digits, separated by hyphens or colons. ")
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }

  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet ipAddresses(List<NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernetIpAddresses> ipAddresses) {
    this.ipAddresses = ipAddresses;
    return this;
  }

  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet addIpAddressesItem(NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernetIpAddresses ipAddressesItem) {
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

   /**
   * Addresses assigned to the CP instance. Each entry represents IP addresses assigned by fixed or dynamic IP address assignment per subnet. 
   * @return ipAddresses
  **/
  @Schema(required = true, description = "Addresses assigned to the CP instance. Each entry represents IP addresses assigned by fixed or dynamic IP address assignment per subnet. ")
  public List<NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernetIpAddresses> getIpAddresses() {
    return ipAddresses;
  }

  public void setIpAddresses(List<NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernetIpAddresses> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }

  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the IP addresses 
   * @return type
  **/
  @Schema(description = "The type of the IP addresses ")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet addresses(String addresses) {
    this.addresses = addresses;
    return this;
  }

   /**
   * An IPV4 or IPV6 address. Representation: In case of an IPV4 address, string that consists of four decimal integers separated by dots, each integer ranging from 0 to 255. In case of an IPV6 address, string that consists of groups of zero to four hexadecimal digits, separated by colons. 
   * @return addresses
  **/
  @Schema(description = "An IPV4 or IPV6 address. Representation: In case of an IPV4 address, string that consists of four decimal integers separated by dots, each integer ranging from 0 to 255. In case of an IPV6 address, string that consists of groups of zero to four hexadecimal digits, separated by colons. ")
  public String getAddresses() {
    return addresses;
  }

  public void setAddresses(String addresses) {
    this.addresses = addresses;
  }

  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet isDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
    return this;
  }

   /**
   * Indicates whether this set of addresses was assigned dynamically (true) or based on address information provided as input from the API consumer (false). Shall be present if \&quot;addresses\&quot; is present and shall be absent otherwise. 
   * @return isDynamic
  **/
  @Schema(description = "Indicates whether this set of addresses was assigned dynamically (true) or based on address information provided as input from the API consumer (false). Shall be present if \"addresses\" is present and shall be absent otherwise. ")
  public Boolean isIsDynamic() {
    return isDynamic;
  }

  public void setIsDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
  }

  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet addressRange(NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernetAddressRange1 addressRange) {
    this.addressRange = addressRange;
    return this;
  }

   /**
   * Get addressRange
   * @return addressRange
  **/
  @Schema(description = "")
  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernetAddressRange1 getAddressRange() {
    return addressRange;
  }

  public void setAddressRange(NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernetAddressRange1 addressRange) {
    this.addressRange = addressRange;
  }

  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet minAddress(String minAddress) {
    this.minAddress = minAddress;
    return this;
  }

   /**
   * An IPV4 or IPV6 address. Representation: In case of an IPV4 address, string that consists of four decimal integers separated by dots, each integer ranging from 0 to 255. In case of an IPV6 address, string that consists of groups of zero to four hexadecimal digits, separated by colons. 
   * @return minAddress
  **/
  @Schema(description = "An IPV4 or IPV6 address. Representation: In case of an IPV4 address, string that consists of four decimal integers separated by dots, each integer ranging from 0 to 255. In case of an IPV6 address, string that consists of groups of zero to four hexadecimal digits, separated by colons. ")
  public String getMinAddress() {
    return minAddress;
  }

  public void setMinAddress(String minAddress) {
    this.minAddress = minAddress;
  }

  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet maxAddress(String maxAddress) {
    this.maxAddress = maxAddress;
    return this;
  }

   /**
   * An IPV4 or IPV6 address. Representation: In case of an IPV4 address, string that consists of four decimal integers separated by dots, each integer ranging from 0 to 255. In case of an IPV6 address, string that consists of groups of zero to four hexadecimal digits, separated by colons. 
   * @return maxAddress
  **/
  @Schema(description = "An IPV4 or IPV6 address. Representation: In case of an IPV4 address, string that consists of four decimal integers separated by dots, each integer ranging from 0 to 255. In case of an IPV6 address, string that consists of groups of zero to four hexadecimal digits, separated by colons. ")
  public String getMaxAddress() {
    return maxAddress;
  }

  public void setMaxAddress(String maxAddress) {
    this.maxAddress = maxAddress;
  }

  public NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

   /**
   * An identifier maintained by the VIM or other resource provider. It is expected to be unique within the VIM instance. Representation: string of variable length. 
   * @return subnetId
  **/
  @Schema(description = "An identifier maintained by the VIM or other resource provider. It is expected to be unique within the VIM instance. Representation: string of variable length. ")
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet nsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet = (NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet) o;
    return Objects.equals(this.macAddress, nsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet.macAddress) &&
        Objects.equals(this.ipAddresses, nsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet.ipAddresses) &&
        Objects.equals(this.type, nsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet.type) &&
        Objects.equals(this.addresses, nsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet.addresses) &&
        Objects.equals(this.isDynamic, nsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet.isDynamic) &&
        Objects.equals(this.addressRange, nsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet.addressRange) &&
        Objects.equals(this.minAddress, nsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet.minAddress) &&
        Objects.equals(this.maxAddress, nsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet.maxAddress) &&
        Objects.equals(this.subnetId, nsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet.subnetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(macAddress, ipAddresses, type, addresses, isDynamic, addressRange, minAddress, maxAddress, subnetId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NsInstancesNsInstanceInstantiatedVnfInfoIpOverEthernet {\n");
    
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    isDynamic: ").append(toIndentedString(isDynamic)).append("\n");
    sb.append("    addressRange: ").append(toIndentedString(addressRange)).append("\n");
    sb.append("    minAddress: ").append(toIndentedString(minAddress)).append("\n");
    sb.append("    maxAddress: ").append(toIndentedString(maxAddress)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
