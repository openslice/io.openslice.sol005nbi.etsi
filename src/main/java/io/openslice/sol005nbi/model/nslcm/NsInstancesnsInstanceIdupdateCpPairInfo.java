/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.3.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openslice.sol005nbi.model.nslcm;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * This type represents describes a pair of ingress and egress CPs or SAPs which  the NFP passes by. It shall comply with the provisions defined in Table 6.5.3.72-1. 
 */
@Schema(description = "This type represents describes a pair of ingress and egress CPs or SAPs which  the NFP passes by. It shall comply with the provisions defined in Table 6.5.3.72-1. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-28T00:48:29.393+02:00[Europe/Athens]")
public class NsInstancesnsInstanceIdupdateCpPairInfo {
  @JsonProperty("vnfExtCpIds")
  private List<String> vnfExtCpIds = null;

  @JsonProperty("pnfExtCpIds")
  private List<String> pnfExtCpIds = null;

  @JsonProperty("sapIds")
  private List<String> sapIds = null;

  public NsInstancesnsInstanceIdupdateCpPairInfo vnfExtCpIds(List<String> vnfExtCpIds) {
    this.vnfExtCpIds = vnfExtCpIds;
    return this;
  }

  public NsInstancesnsInstanceIdupdateCpPairInfo addVnfExtCpIdsItem(String vnfExtCpIdsItem) {
    if (this.vnfExtCpIds == null) {
      this.vnfExtCpIds = new ArrayList<>();
    }
    this.vnfExtCpIds.add(vnfExtCpIdsItem);
    return this;
  }

   /**
   * Identifier(s) of the VNF CP(s) which form the pair. The presence of a single vnfExpCpId, pnfExtCpId, or sapId occurrence indicates  that the CP or SAP is used both as an ingress and egress port at a particular  NFP position. 
   * @return vnfExtCpIds
  **/
  @Schema(description = "Identifier(s) of the VNF CP(s) which form the pair. The presence of a single vnfExpCpId, pnfExtCpId, or sapId occurrence indicates  that the CP or SAP is used both as an ingress and egress port at a particular  NFP position. ")
  public List<String> getVnfExtCpIds() {
    return vnfExtCpIds;
  }

  public void setVnfExtCpIds(List<String> vnfExtCpIds) {
    this.vnfExtCpIds = vnfExtCpIds;
  }

  public NsInstancesnsInstanceIdupdateCpPairInfo pnfExtCpIds(List<String> pnfExtCpIds) {
    this.pnfExtCpIds = pnfExtCpIds;
    return this;
  }

  public NsInstancesnsInstanceIdupdateCpPairInfo addPnfExtCpIdsItem(String pnfExtCpIdsItem) {
    if (this.pnfExtCpIds == null) {
      this.pnfExtCpIds = new ArrayList<>();
    }
    this.pnfExtCpIds.add(pnfExtCpIdsItem);
    return this;
  }

   /**
   * Identifier(s) of the PNF CP(s) which form the pair. The presence of a single vnfExpCpId, pnfExtCpId, or sapId occurrence indicates  that the CP or SAP is used both as an ingress and egress port at a particular  NFP position. 
   * @return pnfExtCpIds
  **/
  @Schema(description = "Identifier(s) of the PNF CP(s) which form the pair. The presence of a single vnfExpCpId, pnfExtCpId, or sapId occurrence indicates  that the CP or SAP is used both as an ingress and egress port at a particular  NFP position. ")
  public List<String> getPnfExtCpIds() {
    return pnfExtCpIds;
  }

  public void setPnfExtCpIds(List<String> pnfExtCpIds) {
    this.pnfExtCpIds = pnfExtCpIds;
  }

  public NsInstancesnsInstanceIdupdateCpPairInfo sapIds(List<String> sapIds) {
    this.sapIds = sapIds;
    return this;
  }

  public NsInstancesnsInstanceIdupdateCpPairInfo addSapIdsItem(String sapIdsItem) {
    if (this.sapIds == null) {
      this.sapIds = new ArrayList<>();
    }
    this.sapIds.add(sapIdsItem);
    return this;
  }

   /**
   * Identifier(s) of the SAP(s) which form the pair. The presence of a single vnfExpCpId, pnfExtCpId, or sapId occurrence indicates  that the CP or SAP is used both as an ingress and egress port at a particular  NFP position. 
   * @return sapIds
  **/
  @Schema(description = "Identifier(s) of the SAP(s) which form the pair. The presence of a single vnfExpCpId, pnfExtCpId, or sapId occurrence indicates  that the CP or SAP is used both as an ingress and egress port at a particular  NFP position. ")
  public List<String> getSapIds() {
    return sapIds;
  }

  public void setSapIds(List<String> sapIds) {
    this.sapIds = sapIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NsInstancesnsInstanceIdupdateCpPairInfo nsInstancesnsInstanceIdupdateCpPairInfo = (NsInstancesnsInstanceIdupdateCpPairInfo) o;
    return Objects.equals(this.vnfExtCpIds, nsInstancesnsInstanceIdupdateCpPairInfo.vnfExtCpIds) &&
        Objects.equals(this.pnfExtCpIds, nsInstancesnsInstanceIdupdateCpPairInfo.pnfExtCpIds) &&
        Objects.equals(this.sapIds, nsInstancesnsInstanceIdupdateCpPairInfo.sapIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vnfExtCpIds, pnfExtCpIds, sapIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NsInstancesnsInstanceIdupdateCpPairInfo {\n");
    
    sb.append("    vnfExtCpIds: ").append(toIndentedString(vnfExtCpIds)).append("\n");
    sb.append("    pnfExtCpIds: ").append(toIndentedString(pnfExtCpIds)).append("\n");
    sb.append("    sapIds: ").append(toIndentedString(sapIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
