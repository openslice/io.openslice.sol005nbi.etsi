/*
 * SOL005 - NSD Management Interface
 * SOL005 - NSD Management Interface  IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 2.0.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openslice.sol005nbi.model.nsd;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * This type represents a subscription filter related to notifications about NSD management. It shall comply with the provisions defined in Table 5.5.3.2-1 of GS NFV-SOL 005. At a particular nesting level in the filter structure, the following applies: All attributes shall match in order for the filter to match (logical \&quot;and\&quot; between different filter attributes). If an attribute is an array, the attribute shall match if at least one of the values in the array matches (logical \&quot;or\&quot; between the values of one filter attribute). NOTE 1: The attributes \&quot;nsdId\&quot; and \&quot;nsdInfoId\&quot; are alternatives to reference to a particular NSD in a filter. They should not be used both in the same filter instance, but one alternative should be chosen. NOTE 2: The attributes \&quot;pnfdId\&quot; and \&quot;pnfdInfoId\&quot; are alternatives to reference to a particular PNFD in a filter. They should not be used both in the same filter instance, but one alternative should be chosen. 
 */
@Schema(description = "This type represents a subscription filter related to notifications about NSD management. It shall comply with the provisions defined in Table 5.5.3.2-1 of GS NFV-SOL 005. At a particular nesting level in the filter structure, the following applies: All attributes shall match in order for the filter to match (logical \"and\" between different filter attributes). If an attribute is an array, the attribute shall match if at least one of the values in the array matches (logical \"or\" between the values of one filter attribute). NOTE 1: The attributes \"nsdId\" and \"nsdInfoId\" are alternatives to reference to a particular NSD in a filter. They should not be used both in the same filter instance, but one alternative should be chosen. NOTE 2: The attributes \"pnfdId\" and \"pnfdInfoId\" are alternatives to reference to a particular PNFD in a filter. They should not be used both in the same filter instance, but one alternative should be chosen. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-31T22:46:27.985+03:00[Europe/Athens]")
public class SubscriptionsFilter {
  /**
   * Gets or Sets notificationTypes
   */
  public enum NotificationTypesEnum {
    NSDONBOARDINGNOTIFICATION("NsdOnBoardingNotification"),
    NSDONBOARDINGFAILURENOTIFICATION("NsdOnboardingFailureNotification"),
    NSDCHANGENOTIFICATION("NsdChangeNotification"),
    NSDDELETIONNOTIFICATION("NsdDeletionNotification"),
    PNFDONBOARDINGNOTIFICATION("PnfdOnBoardingNotification"),
    PNFDONBOARDINGFAILURENOTIFICATION("PnfdOnBoardingFailureNotification"),
    PNFDDELETIONNOTIFICATION("PnfdDeletionNotification");

    private String value;

    NotificationTypesEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static NotificationTypesEnum fromValue(String text) {
      for (NotificationTypesEnum b : NotificationTypesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("notificationTypes")
  private List<NotificationTypesEnum> notificationTypes = null;

  @JsonProperty("nsdInfoId")
  private List<String> nsdInfoId = null;

  @JsonProperty("nsdId")
  private List<String> nsdId = null;

  @JsonProperty("nsdName")
  private List<String> nsdName = null;

  @JsonProperty("nsdVersion")
  private List<String> nsdVersion = null;

  @JsonProperty("nsdDesigner")
  private List<String> nsdDesigner = null;

  @JsonProperty("nsdInvariantId")
  private List<String> nsdInvariantId = null;

  @JsonProperty("vnfPkgIds")
  private List<String> vnfPkgIds = null;

  @JsonProperty("pnfdInfoIds")
  private List<String> pnfdInfoIds = null;

  @JsonProperty("nestedNsdInfoIds")
  private List<String> nestedNsdInfoIds = null;

  /**
   * The enumeration NsdOnboardingStateType shall comply with the provisions defined in Table 5.5.4.5-1 of GS NFV-SOL 005. It indicates the on-boarding state of the NSD. CREATED &#x3D; The NSD information object has been created. UPLOADING &#x3D; The associated NSD content is being uploaded. PROCESSING &#x3D; The associated NSD content is being processed, e.g. validation. ONBOARDED &#x3D; The associated NSD content has been on-boarded. ERROR &#x3D; There was an error during upload or processing of the NSD content. 
   */
  public enum NsdOnboardingStateEnum {
    CREATED("CREATED"),
    UPLOADING("UPLOADING"),
    PROCESSING("PROCESSING"),
    ONBOARDED("ONBOARDED"),
    ERROR("ERROR");

    private String value;

    NsdOnboardingStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static NsdOnboardingStateEnum fromValue(String text) {
      for (NsdOnboardingStateEnum b : NsdOnboardingStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("nsdOnboardingState")
  private List<NsdOnboardingStateEnum> nsdOnboardingState = null;

  /**
   * The enumeration NsdOperationalStateType shall comply with the provisions defined in Table 5.5.4.3-1 of GS NFV_SOL 005. It indicates the operational state of the resource. ENABLED &#x3D; The operational state of the resource is enabled. DISABLED &#x3D; The operational state of the resource is disabled. 
   */
  public enum NsdOperationalStateEnum {
    ENABLED("ENABLED"),
    DISABLED("DISABLED");

    private String value;

    NsdOperationalStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static NsdOperationalStateEnum fromValue(String text) {
      for (NsdOperationalStateEnum b : NsdOperationalStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("nsdOperationalState")
  private List<NsdOperationalStateEnum> nsdOperationalState = null;

  /**
   * The enumeration NsdUsageStateType shall comply with the provisions defined in Table 5.5.4.4-1 of GS NFV-SOL 005. It indicates the usage state of the resource.IN_USE &#x3D; The resource is in use.NOT_IN_USE &#x3D; The resource is not-in-use. 
   */
  public enum NsdUsageStateEnum {
    IN_USE("IN_USE"),
    NOT_IN_USE("NOT_IN_USE");

    private String value;

    NsdUsageStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static NsdUsageStateEnum fromValue(String text) {
      for (NsdUsageStateEnum b : NsdUsageStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("nsdUsageState")
  private List<NsdUsageStateEnum> nsdUsageState = null;

  @JsonProperty("pnfdId")
  private List<String> pnfdId = null;

  @JsonProperty("pnfdName")
  private List<String> pnfdName = null;

  @JsonProperty("pnfdVersion")
  private List<String> pnfdVersion = null;

  @JsonProperty("pnfdProvider")
  private List<String> pnfdProvider = null;

  @JsonProperty("pnfdInvariantId")
  private List<String> pnfdInvariantId = null;

  /**
   * The enumeration PnfdOnboardingStateType shall comply with the provisions defined in Table 5.5.4.6-1 of GS-NFV SOL005. It indicates the on-boarding state of the individual PNF descriptor resource. CREATED &#x3D; The PNF descriptor resource has been created. UPLOADING &#x3D; The associated PNFD content is being uploaded. PROCESSING &#x3D; The associated PNFD content is being processed, e.g. validation. ONBOARDED &#x3D; The associated PNFD content has been on-boarded. ERROR &#x3D; There was an error during upload or processing of the associated PNFD content. 
   */
  public enum PnfdOnboardingStateEnum {
    CREATED("CREATED"),
    UPLOADING("UPLOADING"),
    PROCESSING("PROCESSING"),
    ONBOARDING("ONBOARDING"),
    ERROR("ERROR");

    private String value;

    PnfdOnboardingStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PnfdOnboardingStateEnum fromValue(String text) {
      for (PnfdOnboardingStateEnum b : PnfdOnboardingStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("pnfdOnboardingState")
  private List<PnfdOnboardingStateEnum> pnfdOnboardingState = null;

  /**
   * The enumeration PnfdUsageStateType shall comply with the provisions defined in Table 5.5.4.7-1 of GS NFV-SOL005. It indicates the usage state of the resource.IN-USE &#x3D; The resource is in use.NOT_IN_USE &#x3D; The resource is not-in-use. 
   */
  public enum PnfdUsageStateEnum {
    IN_USE("IN_USE"),
    NOT_IN_USE("NOT_IN_USE");

    private String value;

    PnfdUsageStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PnfdUsageStateEnum fromValue(String text) {
      for (PnfdUsageStateEnum b : PnfdUsageStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("pnfdUsageState")
  private List<PnfdUsageStateEnum> pnfdUsageState = null;

  public SubscriptionsFilter notificationTypes(List<NotificationTypesEnum> notificationTypes) {
    this.notificationTypes = notificationTypes;
    return this;
  }

  public SubscriptionsFilter addNotificationTypesItem(NotificationTypesEnum notificationTypesItem) {
    if (this.notificationTypes == null) {
      this.notificationTypes = new ArrayList<>();
    }
    this.notificationTypes.add(notificationTypesItem);
    return this;
  }

   /**
   * Match particular notification types. Permitted values: NsdOnBoardingNotification, NsdOnboardingFailureNotification, NsdChangeNotification, NsdDeletionNotification PnfdOnBoardingNotification, PnfdOnBoardingFailureNotification, PnfdDeletionNotification. The permitted values of the \&quot;notificationTypes\&quot; ] attribute are spelled exactly as the names of the notification types to facilitate automated code generation systems. 
   * @return notificationTypes
  **/
  @Schema(description = "Match particular notification types. Permitted values: NsdOnBoardingNotification, NsdOnboardingFailureNotification, NsdChangeNotification, NsdDeletionNotification PnfdOnBoardingNotification, PnfdOnBoardingFailureNotification, PnfdDeletionNotification. The permitted values of the \"notificationTypes\" ] attribute are spelled exactly as the names of the notification types to facilitate automated code generation systems. ")
  public List<NotificationTypesEnum> getNotificationTypes() {
    return notificationTypes;
  }

  public void setNotificationTypes(List<NotificationTypesEnum> notificationTypes) {
    this.notificationTypes = notificationTypes;
  }

  public SubscriptionsFilter nsdInfoId(List<String> nsdInfoId) {
    this.nsdInfoId = nsdInfoId;
    return this;
  }

  public SubscriptionsFilter addNsdInfoIdItem(String nsdInfoIdItem) {
    if (this.nsdInfoId == null) {
      this.nsdInfoId = new ArrayList<>();
    }
    this.nsdInfoId.add(nsdInfoIdItem);
    return this;
  }

   /**
   * Match the NsdInfo identifier which is allocated by the NFVO. 
   * @return nsdInfoId
  **/
  @Schema(description = "Match the NsdInfo identifier which is allocated by the NFVO. ")
  public List<String> getNsdInfoId() {
    return nsdInfoId;
  }

  public void setNsdInfoId(List<String> nsdInfoId) {
    this.nsdInfoId = nsdInfoId;
  }

  public SubscriptionsFilter nsdId(List<String> nsdId) {
    this.nsdId = nsdId;
    return this;
  }

  public SubscriptionsFilter addNsdIdItem(String nsdIdItem) {
    if (this.nsdId == null) {
      this.nsdId = new ArrayList<>();
    }
    this.nsdId.add(nsdIdItem);
    return this;
  }

   /**
   * Match the NSD identifier, which is allocated by the NSD designer. 
   * @return nsdId
  **/
  @Schema(description = "Match the NSD identifier, which is allocated by the NSD designer. ")
  public List<String> getNsdId() {
    return nsdId;
  }

  public void setNsdId(List<String> nsdId) {
    this.nsdId = nsdId;
  }

  public SubscriptionsFilter nsdName(List<String> nsdName) {
    this.nsdName = nsdName;
    return this;
  }

  public SubscriptionsFilter addNsdNameItem(String nsdNameItem) {
    if (this.nsdName == null) {
      this.nsdName = new ArrayList<>();
    }
    this.nsdName.add(nsdNameItem);
    return this;
  }

   /**
   * Match the name of the on boarded NSD. 
   * @return nsdName
  **/
  @Schema(description = "Match the name of the on boarded NSD. ")
  public List<String> getNsdName() {
    return nsdName;
  }

  public void setNsdName(List<String> nsdName) {
    this.nsdName = nsdName;
  }

  public SubscriptionsFilter nsdVersion(List<String> nsdVersion) {
    this.nsdVersion = nsdVersion;
    return this;
  }

  public SubscriptionsFilter addNsdVersionItem(String nsdVersionItem) {
    if (this.nsdVersion == null) {
      this.nsdVersion = new ArrayList<>();
    }
    this.nsdVersion.add(nsdVersionItem);
    return this;
  }

   /**
   * Match the NSD version listed as part of this attribute. 
   * @return nsdVersion
  **/
  @Schema(description = "Match the NSD version listed as part of this attribute. ")
  public List<String> getNsdVersion() {
    return nsdVersion;
  }

  public void setNsdVersion(List<String> nsdVersion) {
    this.nsdVersion = nsdVersion;
  }

  public SubscriptionsFilter nsdDesigner(List<String> nsdDesigner) {
    this.nsdDesigner = nsdDesigner;
    return this;
  }

  public SubscriptionsFilter addNsdDesignerItem(String nsdDesignerItem) {
    if (this.nsdDesigner == null) {
      this.nsdDesigner = new ArrayList<>();
    }
    this.nsdDesigner.add(nsdDesignerItem);
    return this;
  }

   /**
   * Match the NSD designer of the on-boarded NSD. 
   * @return nsdDesigner
  **/
  @Schema(description = "Match the NSD designer of the on-boarded NSD. ")
  public List<String> getNsdDesigner() {
    return nsdDesigner;
  }

  public void setNsdDesigner(List<String> nsdDesigner) {
    this.nsdDesigner = nsdDesigner;
  }

  public SubscriptionsFilter nsdInvariantId(List<String> nsdInvariantId) {
    this.nsdInvariantId = nsdInvariantId;
    return this;
  }

  public SubscriptionsFilter addNsdInvariantIdItem(String nsdInvariantIdItem) {
    if (this.nsdInvariantId == null) {
      this.nsdInvariantId = new ArrayList<>();
    }
    this.nsdInvariantId.add(nsdInvariantIdItem);
    return this;
  }

   /**
   * Match the NSD invariant identifier which is allocated by the NSD designer and identifies an NSD in a version independent manner. 
   * @return nsdInvariantId
  **/
  @Schema(description = "Match the NSD invariant identifier which is allocated by the NSD designer and identifies an NSD in a version independent manner. ")
  public List<String> getNsdInvariantId() {
    return nsdInvariantId;
  }

  public void setNsdInvariantId(List<String> nsdInvariantId) {
    this.nsdInvariantId = nsdInvariantId;
  }

  public SubscriptionsFilter vnfPkgIds(List<String> vnfPkgIds) {
    this.vnfPkgIds = vnfPkgIds;
    return this;
  }

  public SubscriptionsFilter addVnfPkgIdsItem(String vnfPkgIdsItem) {
    if (this.vnfPkgIds == null) {
      this.vnfPkgIds = new ArrayList<>();
    }
    this.vnfPkgIds.add(vnfPkgIdsItem);
    return this;
  }

   /**
   * Match VNF packages with a package identifier listed in the attribute. 
   * @return vnfPkgIds
  **/
  @Schema(description = "Match VNF packages with a package identifier listed in the attribute. ")
  public List<String> getVnfPkgIds() {
    return vnfPkgIds;
  }

  public void setVnfPkgIds(List<String> vnfPkgIds) {
    this.vnfPkgIds = vnfPkgIds;
  }

  public SubscriptionsFilter pnfdInfoIds(List<String> pnfdInfoIds) {
    this.pnfdInfoIds = pnfdInfoIds;
    return this;
  }

  public SubscriptionsFilter addPnfdInfoIdsItem(String pnfdInfoIdsItem) {
    if (this.pnfdInfoIds == null) {
      this.pnfdInfoIds = new ArrayList<>();
    }
    this.pnfdInfoIds.add(pnfdInfoIdsItem);
    return this;
  }

   /**
   * Match the PnfdInfo identifier for the PNFD referenced by the on-boarded NSD. 
   * @return pnfdInfoIds
  **/
  @Schema(description = "Match the PnfdInfo identifier for the PNFD referenced by the on-boarded NSD. ")
  public List<String> getPnfdInfoIds() {
    return pnfdInfoIds;
  }

  public void setPnfdInfoIds(List<String> pnfdInfoIds) {
    this.pnfdInfoIds = pnfdInfoIds;
  }

  public SubscriptionsFilter nestedNsdInfoIds(List<String> nestedNsdInfoIds) {
    this.nestedNsdInfoIds = nestedNsdInfoIds;
    return this;
  }

  public SubscriptionsFilter addNestedNsdInfoIdsItem(String nestedNsdInfoIdsItem) {
    if (this.nestedNsdInfoIds == null) {
      this.nestedNsdInfoIds = new ArrayList<>();
    }
    this.nestedNsdInfoIds.add(nestedNsdInfoIdsItem);
    return this;
  }

   /**
   * Match the NsdInfo identifier for the nested NSD referenced by the on-boarded NSD. 
   * @return nestedNsdInfoIds
  **/
  @Schema(description = "Match the NsdInfo identifier for the nested NSD referenced by the on-boarded NSD. ")
  public List<String> getNestedNsdInfoIds() {
    return nestedNsdInfoIds;
  }

  public void setNestedNsdInfoIds(List<String> nestedNsdInfoIds) {
    this.nestedNsdInfoIds = nestedNsdInfoIds;
  }

  public SubscriptionsFilter nsdOnboardingState(List<NsdOnboardingStateEnum> nsdOnboardingState) {
    this.nsdOnboardingState = nsdOnboardingState;
    return this;
  }

  public SubscriptionsFilter addNsdOnboardingStateItem(NsdOnboardingStateEnum nsdOnboardingStateItem) {
    if (this.nsdOnboardingState == null) {
      this.nsdOnboardingState = new ArrayList<>();
    }
    this.nsdOnboardingState.add(nsdOnboardingStateItem);
    return this;
  }

   /**
   * Match particular on-boarding state of the NSD. 
   * @return nsdOnboardingState
  **/
  @Schema(description = "Match particular on-boarding state of the NSD. ")
  public List<NsdOnboardingStateEnum> getNsdOnboardingState() {
    return nsdOnboardingState;
  }

  public void setNsdOnboardingState(List<NsdOnboardingStateEnum> nsdOnboardingState) {
    this.nsdOnboardingState = nsdOnboardingState;
  }

  public SubscriptionsFilter nsdOperationalState(List<NsdOperationalStateEnum> nsdOperationalState) {
    this.nsdOperationalState = nsdOperationalState;
    return this;
  }

  public SubscriptionsFilter addNsdOperationalStateItem(NsdOperationalStateEnum nsdOperationalStateItem) {
    if (this.nsdOperationalState == null) {
      this.nsdOperationalState = new ArrayList<>();
    }
    this.nsdOperationalState.add(nsdOperationalStateItem);
    return this;
  }

   /**
   * Match particular operational state of the on-boarded NSD. 
   * @return nsdOperationalState
  **/
  @Schema(description = "Match particular operational state of the on-boarded NSD. ")
  public List<NsdOperationalStateEnum> getNsdOperationalState() {
    return nsdOperationalState;
  }

  public void setNsdOperationalState(List<NsdOperationalStateEnum> nsdOperationalState) {
    this.nsdOperationalState = nsdOperationalState;
  }

  public SubscriptionsFilter nsdUsageState(List<NsdUsageStateEnum> nsdUsageState) {
    this.nsdUsageState = nsdUsageState;
    return this;
  }

  public SubscriptionsFilter addNsdUsageStateItem(NsdUsageStateEnum nsdUsageStateItem) {
    if (this.nsdUsageState == null) {
      this.nsdUsageState = new ArrayList<>();
    }
    this.nsdUsageState.add(nsdUsageStateItem);
    return this;
  }

   /**
   * Match particular usage state of the on-boarded NSD. 
   * @return nsdUsageState
  **/
  @Schema(description = "Match particular usage state of the on-boarded NSD. ")
  public List<NsdUsageStateEnum> getNsdUsageState() {
    return nsdUsageState;
  }

  public void setNsdUsageState(List<NsdUsageStateEnum> nsdUsageState) {
    this.nsdUsageState = nsdUsageState;
  }

  public SubscriptionsFilter pnfdId(List<String> pnfdId) {
    this.pnfdId = pnfdId;
    return this;
  }

  public SubscriptionsFilter addPnfdIdItem(String pnfdIdItem) {
    if (this.pnfdId == null) {
      this.pnfdId = new ArrayList<>();
    }
    this.pnfdId.add(pnfdIdItem);
    return this;
  }

   /**
   * Match the PNFD identifier which is copied from the PNFD content. 
   * @return pnfdId
  **/
  @Schema(description = "Match the PNFD identifier which is copied from the PNFD content. ")
  public List<String> getPnfdId() {
    return pnfdId;
  }

  public void setPnfdId(List<String> pnfdId) {
    this.pnfdId = pnfdId;
  }

  public SubscriptionsFilter pnfdName(List<String> pnfdName) {
    this.pnfdName = pnfdName;
    return this;
  }

  public SubscriptionsFilter addPnfdNameItem(String pnfdNameItem) {
    if (this.pnfdName == null) {
      this.pnfdName = new ArrayList<>();
    }
    this.pnfdName.add(pnfdNameItem);
    return this;
  }

   /**
   * Match the name of the on-boarded PNFD. 
   * @return pnfdName
  **/
  @Schema(description = "Match the name of the on-boarded PNFD. ")
  public List<String> getPnfdName() {
    return pnfdName;
  }

  public void setPnfdName(List<String> pnfdName) {
    this.pnfdName = pnfdName;
  }

  public SubscriptionsFilter pnfdVersion(List<String> pnfdVersion) {
    this.pnfdVersion = pnfdVersion;
    return this;
  }

  public SubscriptionsFilter addPnfdVersionItem(String pnfdVersionItem) {
    if (this.pnfdVersion == null) {
      this.pnfdVersion = new ArrayList<>();
    }
    this.pnfdVersion.add(pnfdVersionItem);
    return this;
  }

   /**
   * Match the PNFD designer of the on-boarded PNFD. 
   * @return pnfdVersion
  **/
  @Schema(description = "Match the PNFD designer of the on-boarded PNFD. ")
  public List<String> getPnfdVersion() {
    return pnfdVersion;
  }

  public void setPnfdVersion(List<String> pnfdVersion) {
    this.pnfdVersion = pnfdVersion;
  }

  public SubscriptionsFilter pnfdProvider(List<String> pnfdProvider) {
    this.pnfdProvider = pnfdProvider;
    return this;
  }

  public SubscriptionsFilter addPnfdProviderItem(String pnfdProviderItem) {
    if (this.pnfdProvider == null) {
      this.pnfdProvider = new ArrayList<>();
    }
    this.pnfdProvider.add(pnfdProviderItem);
    return this;
  }

   /**
   * Match the provider of the on-boarded PNFD. 
   * @return pnfdProvider
  **/
  @Schema(description = "Match the provider of the on-boarded PNFD. ")
  public List<String> getPnfdProvider() {
    return pnfdProvider;
  }

  public void setPnfdProvider(List<String> pnfdProvider) {
    this.pnfdProvider = pnfdProvider;
  }

  public SubscriptionsFilter pnfdInvariantId(List<String> pnfdInvariantId) {
    this.pnfdInvariantId = pnfdInvariantId;
    return this;
  }

  public SubscriptionsFilter addPnfdInvariantIdItem(String pnfdInvariantIdItem) {
    if (this.pnfdInvariantId == null) {
      this.pnfdInvariantId = new ArrayList<>();
    }
    this.pnfdInvariantId.add(pnfdInvariantIdItem);
    return this;
  }

   /**
   * Match the PNFD in a version independent manner. 
   * @return pnfdInvariantId
  **/
  @Schema(description = "Match the PNFD in a version independent manner. ")
  public List<String> getPnfdInvariantId() {
    return pnfdInvariantId;
  }

  public void setPnfdInvariantId(List<String> pnfdInvariantId) {
    this.pnfdInvariantId = pnfdInvariantId;
  }

  public SubscriptionsFilter pnfdOnboardingState(List<PnfdOnboardingStateEnum> pnfdOnboardingState) {
    this.pnfdOnboardingState = pnfdOnboardingState;
    return this;
  }

  public SubscriptionsFilter addPnfdOnboardingStateItem(PnfdOnboardingStateEnum pnfdOnboardingStateItem) {
    if (this.pnfdOnboardingState == null) {
      this.pnfdOnboardingState = new ArrayList<>();
    }
    this.pnfdOnboardingState.add(pnfdOnboardingStateItem);
    return this;
  }

   /**
   * Match particular on-boarding state of the PNFD. 
   * @return pnfdOnboardingState
  **/
  @Schema(description = "Match particular on-boarding state of the PNFD. ")
  public List<PnfdOnboardingStateEnum> getPnfdOnboardingState() {
    return pnfdOnboardingState;
  }

  public void setPnfdOnboardingState(List<PnfdOnboardingStateEnum> pnfdOnboardingState) {
    this.pnfdOnboardingState = pnfdOnboardingState;
  }

  public SubscriptionsFilter pnfdUsageState(List<PnfdUsageStateEnum> pnfdUsageState) {
    this.pnfdUsageState = pnfdUsageState;
    return this;
  }

  public SubscriptionsFilter addPnfdUsageStateItem(PnfdUsageStateEnum pnfdUsageStateItem) {
    if (this.pnfdUsageState == null) {
      this.pnfdUsageState = new ArrayList<>();
    }
    this.pnfdUsageState.add(pnfdUsageStateItem);
    return this;
  }

   /**
   * Match the usage state of the individual PNF descriptor resource. 
   * @return pnfdUsageState
  **/
  @Schema(description = "Match the usage state of the individual PNF descriptor resource. ")
  public List<PnfdUsageStateEnum> getPnfdUsageState() {
    return pnfdUsageState;
  }

  public void setPnfdUsageState(List<PnfdUsageStateEnum> pnfdUsageState) {
    this.pnfdUsageState = pnfdUsageState;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionsFilter subscriptionsFilter = (SubscriptionsFilter) o;
    return Objects.equals(this.notificationTypes, subscriptionsFilter.notificationTypes) &&
        Objects.equals(this.nsdInfoId, subscriptionsFilter.nsdInfoId) &&
        Objects.equals(this.nsdId, subscriptionsFilter.nsdId) &&
        Objects.equals(this.nsdName, subscriptionsFilter.nsdName) &&
        Objects.equals(this.nsdVersion, subscriptionsFilter.nsdVersion) &&
        Objects.equals(this.nsdDesigner, subscriptionsFilter.nsdDesigner) &&
        Objects.equals(this.nsdInvariantId, subscriptionsFilter.nsdInvariantId) &&
        Objects.equals(this.vnfPkgIds, subscriptionsFilter.vnfPkgIds) &&
        Objects.equals(this.pnfdInfoIds, subscriptionsFilter.pnfdInfoIds) &&
        Objects.equals(this.nestedNsdInfoIds, subscriptionsFilter.nestedNsdInfoIds) &&
        Objects.equals(this.nsdOnboardingState, subscriptionsFilter.nsdOnboardingState) &&
        Objects.equals(this.nsdOperationalState, subscriptionsFilter.nsdOperationalState) &&
        Objects.equals(this.nsdUsageState, subscriptionsFilter.nsdUsageState) &&
        Objects.equals(this.pnfdId, subscriptionsFilter.pnfdId) &&
        Objects.equals(this.pnfdName, subscriptionsFilter.pnfdName) &&
        Objects.equals(this.pnfdVersion, subscriptionsFilter.pnfdVersion) &&
        Objects.equals(this.pnfdProvider, subscriptionsFilter.pnfdProvider) &&
        Objects.equals(this.pnfdInvariantId, subscriptionsFilter.pnfdInvariantId) &&
        Objects.equals(this.pnfdOnboardingState, subscriptionsFilter.pnfdOnboardingState) &&
        Objects.equals(this.pnfdUsageState, subscriptionsFilter.pnfdUsageState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notificationTypes, nsdInfoId, nsdId, nsdName, nsdVersion, nsdDesigner, nsdInvariantId, vnfPkgIds, pnfdInfoIds, nestedNsdInfoIds, nsdOnboardingState, nsdOperationalState, nsdUsageState, pnfdId, pnfdName, pnfdVersion, pnfdProvider, pnfdInvariantId, pnfdOnboardingState, pnfdUsageState);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionsFilter {\n");
    
    sb.append("    notificationTypes: ").append(toIndentedString(notificationTypes)).append("\n");
    sb.append("    nsdInfoId: ").append(toIndentedString(nsdInfoId)).append("\n");
    sb.append("    nsdId: ").append(toIndentedString(nsdId)).append("\n");
    sb.append("    nsdName: ").append(toIndentedString(nsdName)).append("\n");
    sb.append("    nsdVersion: ").append(toIndentedString(nsdVersion)).append("\n");
    sb.append("    nsdDesigner: ").append(toIndentedString(nsdDesigner)).append("\n");
    sb.append("    nsdInvariantId: ").append(toIndentedString(nsdInvariantId)).append("\n");
    sb.append("    vnfPkgIds: ").append(toIndentedString(vnfPkgIds)).append("\n");
    sb.append("    pnfdInfoIds: ").append(toIndentedString(pnfdInfoIds)).append("\n");
    sb.append("    nestedNsdInfoIds: ").append(toIndentedString(nestedNsdInfoIds)).append("\n");
    sb.append("    nsdOnboardingState: ").append(toIndentedString(nsdOnboardingState)).append("\n");
    sb.append("    nsdOperationalState: ").append(toIndentedString(nsdOperationalState)).append("\n");
    sb.append("    nsdUsageState: ").append(toIndentedString(nsdUsageState)).append("\n");
    sb.append("    pnfdId: ").append(toIndentedString(pnfdId)).append("\n");
    sb.append("    pnfdName: ").append(toIndentedString(pnfdName)).append("\n");
    sb.append("    pnfdVersion: ").append(toIndentedString(pnfdVersion)).append("\n");
    sb.append("    pnfdProvider: ").append(toIndentedString(pnfdProvider)).append("\n");
    sb.append("    pnfdInvariantId: ").append(toIndentedString(pnfdInvariantId)).append("\n");
    sb.append("    pnfdOnboardingState: ").append(toIndentedString(pnfdOnboardingState)).append("\n");
    sb.append("    pnfdUsageState: ").append(toIndentedString(pnfdUsageState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
