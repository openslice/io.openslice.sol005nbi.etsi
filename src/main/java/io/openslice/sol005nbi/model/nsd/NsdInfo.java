/*
 * SOL005 - NSD Management Interface
 * SOL005 - NSD Management Interface  IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 2.0.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openslice.sol005nbi.model.nsd;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * This type represents a response for the query NSD operation. 
 */
@Schema(description = "This type represents a response for the query NSD operation. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-31T22:46:27.985+03:00[Europe/Athens]")
public class NsdInfo {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("nsdId")
  private String nsdId = null;

  @JsonProperty("nsdName")
  private String nsdName = null;

  @JsonProperty("nsdVersion")
  private String nsdVersion = null;

  @JsonProperty("nsdDesigner")
  private String nsdDesigner = null;

  @JsonProperty("nsdInvariantId")
  private String nsdInvariantId = null;

  @JsonProperty("vnfPkgIds")
  private List<String> vnfPkgIds = null;

  @JsonProperty("pnfdInfoIds")
  private List<String> pnfdInfoIds = null;

  @JsonProperty("nestedNsdInfoIds")
  private List<String> nestedNsdInfoIds = null;

  /**
   * Signals the security option used by the NSD archive as defined in clause 5.1 of ETSI GS NFV SOL 007. Valid values: OPTION_1, OPTION_2 
   */
  public enum ArchiveSecurityOptionEnum {
    _1("OPTION_1"),
    _2("OPTION_2");

    private String value;

    ArchiveSecurityOptionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ArchiveSecurityOptionEnum fromValue(String text) {
      for (ArchiveSecurityOptionEnum b : ArchiveSecurityOptionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("archiveSecurityOption")
  private ArchiveSecurityOptionEnum archiveSecurityOption = null;

  @JsonProperty("signingCertificate")
  private String signingCertificate = null;

  @JsonProperty("artifacts")
  private List<NsDescriptorsArtifacts> artifacts = null;

  /**
   * The enumeration NsdOnboardingStateType shall comply with the provisions defined in Table 5.5.4.5-1 of GS NFV-SOL 005. It indicates the on-boarding state of the NSD. CREATED &#x3D; The NSD information object has been created. UPLOADING &#x3D; The associated NSD content is being uploaded. PROCESSING &#x3D; The associated NSD content is being processed, e.g. validation. ONBOARDED &#x3D; The associated NSD content has been on-boarded. ERROR &#x3D; There was an error during upload or processing of the NSD content. 
   */
  public enum NsdOnboardingStateEnum {
    CREATED("CREATED"),
    UPLOADING("UPLOADING"),
    PROCESSING("PROCESSING"),
    ONBOARDED("ONBOARDED"),
    ERROR("ERROR");

    private String value;

    NsdOnboardingStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static NsdOnboardingStateEnum fromValue(String text) {
      for (NsdOnboardingStateEnum b : NsdOnboardingStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("nsdOnboardingState")
  private NsdOnboardingStateEnum nsdOnboardingState = null;

  @JsonProperty("onboardingFailureDetails")
  private InlineResponse400 onboardingFailureDetails = null;

  /**
   * The enumeration NsdOperationalStateType shall comply with the provisions defined in Table 5.5.4.3-1 of GS NFV_SOL 005. It indicates the operational state of the resource. ENABLED &#x3D; The operational state of the resource is enabled. DISABLED &#x3D; The operational state of the resource is disabled. 
   */
  public enum NsdOperationalStateEnum {
    ENABLED("ENABLED"),
    DISABLED("DISABLED");

    private String value;

    NsdOperationalStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static NsdOperationalStateEnum fromValue(String text) {
      for (NsdOperationalStateEnum b : NsdOperationalStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("nsdOperationalState")
  private NsdOperationalStateEnum nsdOperationalState = null;

  /**
   * The enumeration NsdUsageStateType shall comply with the provisions defined in Table 5.5.4.4-1 of GS NFV-SOL 005. It indicates the usage state of the resource.IN_USE &#x3D; The resource is in use.NOT_IN_USE &#x3D; The resource is not-in-use. 
   */
  public enum NsdUsageStateEnum {
    IN_USE("IN_USE"),
    NOT_IN_USE("NOT_IN_USE");

    private String value;

    NsdUsageStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static NsdUsageStateEnum fromValue(String text) {
      for (NsdUsageStateEnum b : NsdUsageStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("nsdUsageState")
  private NsdUsageStateEnum nsdUsageState = null;

  @JsonProperty("userDefinedData")
  private Object userDefinedData = null;

  @JsonProperty("_links")
  private NsDescriptorsLinks _links = null;

  public NsdInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * An identifier with the intention of being globally unique. 
   * @return id
  **/
  @Schema(required = true, description = "An identifier with the intention of being globally unique. ")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public NsdInfo nsdId(String nsdId) {
    this.nsdId = nsdId;
    return this;
  }

   /**
   * An identifier with the intention of being globally unique. 
   * @return nsdId
  **/
  @Schema(description = "An identifier with the intention of being globally unique. ")
  public String getNsdId() {
    return nsdId;
  }

  public void setNsdId(String nsdId) {
    this.nsdId = nsdId;
  }

  public NsdInfo nsdName(String nsdName) {
    this.nsdName = nsdName;
    return this;
  }

   /**
   * Name of the on boarded NSD. This information is copied from the NSD content and shall be present after the NSD content is on-boarded. 
   * @return nsdName
  **/
  @Schema(description = "Name of the on boarded NSD. This information is copied from the NSD content and shall be present after the NSD content is on-boarded. ")
  public String getNsdName() {
    return nsdName;
  }

  public void setNsdName(String nsdName) {
    this.nsdName = nsdName;
  }

  public NsdInfo nsdVersion(String nsdVersion) {
    this.nsdVersion = nsdVersion;
    return this;
  }

   /**
   * A Version. Representation: string of variable length. 
   * @return nsdVersion
  **/
  @Schema(description = "A Version. Representation: string of variable length. ")
  public String getNsdVersion() {
    return nsdVersion;
  }

  public void setNsdVersion(String nsdVersion) {
    this.nsdVersion = nsdVersion;
  }

  public NsdInfo nsdDesigner(String nsdDesigner) {
    this.nsdDesigner = nsdDesigner;
    return this;
  }

   /**
   * Designer of the on-boarded NSD. This information is copied from the NSD content and shall be present after the NSD content is on-boarded. 
   * @return nsdDesigner
  **/
  @Schema(description = "Designer of the on-boarded NSD. This information is copied from the NSD content and shall be present after the NSD content is on-boarded. ")
  public String getNsdDesigner() {
    return nsdDesigner;
  }

  public void setNsdDesigner(String nsdDesigner) {
    this.nsdDesigner = nsdDesigner;
  }

  public NsdInfo nsdInvariantId(String nsdInvariantId) {
    this.nsdInvariantId = nsdInvariantId;
    return this;
  }

   /**
   * An identifier with the intention of being globally unique. 
   * @return nsdInvariantId
  **/
  @Schema(description = "An identifier with the intention of being globally unique. ")
  public String getNsdInvariantId() {
    return nsdInvariantId;
  }

  public void setNsdInvariantId(String nsdInvariantId) {
    this.nsdInvariantId = nsdInvariantId;
  }

  public NsdInfo vnfPkgIds(List<String> vnfPkgIds) {
    this.vnfPkgIds = vnfPkgIds;
    return this;
  }

  public NsdInfo addVnfPkgIdsItem(String vnfPkgIdsItem) {
    if (this.vnfPkgIds == null) {
      this.vnfPkgIds = new ArrayList<>();
    }
    this.vnfPkgIds.add(vnfPkgIdsItem);
    return this;
  }

   /**
   * Identifies the VNF package for the VNFD referenced by the on-boarded NS descriptor resource. 
   * @return vnfPkgIds
  **/
  @Schema(description = "Identifies the VNF package for the VNFD referenced by the on-boarded NS descriptor resource. ")
  public List<String> getVnfPkgIds() {
    return vnfPkgIds;
  }

  public void setVnfPkgIds(List<String> vnfPkgIds) {
    this.vnfPkgIds = vnfPkgIds;
  }

  public NsdInfo pnfdInfoIds(List<String> pnfdInfoIds) {
    this.pnfdInfoIds = pnfdInfoIds;
    return this;
  }

  public NsdInfo addPnfdInfoIdsItem(String pnfdInfoIdsItem) {
    if (this.pnfdInfoIds == null) {
      this.pnfdInfoIds = new ArrayList<>();
    }
    this.pnfdInfoIds.add(pnfdInfoIdsItem);
    return this;
  }

   /**
   * Identifies the PnfdInfo element for the PNFD referenced by the on-boarded NS descriptor resource. 
   * @return pnfdInfoIds
  **/
  @Schema(description = "Identifies the PnfdInfo element for the PNFD referenced by the on-boarded NS descriptor resource. ")
  public List<String> getPnfdInfoIds() {
    return pnfdInfoIds;
  }

  public void setPnfdInfoIds(List<String> pnfdInfoIds) {
    this.pnfdInfoIds = pnfdInfoIds;
  }

  public NsdInfo nestedNsdInfoIds(List<String> nestedNsdInfoIds) {
    this.nestedNsdInfoIds = nestedNsdInfoIds;
    return this;
  }

  public NsdInfo addNestedNsdInfoIdsItem(String nestedNsdInfoIdsItem) {
    if (this.nestedNsdInfoIds == null) {
      this.nestedNsdInfoIds = new ArrayList<>();
    }
    this.nestedNsdInfoIds.add(nestedNsdInfoIdsItem);
    return this;
  }

   /**
   * Identifies the NsdInfo element for the nested NSD referenced by the on-boarded NS descriptor resource. 
   * @return nestedNsdInfoIds
  **/
  @Schema(description = "Identifies the NsdInfo element for the nested NSD referenced by the on-boarded NS descriptor resource. ")
  public List<String> getNestedNsdInfoIds() {
    return nestedNsdInfoIds;
  }

  public void setNestedNsdInfoIds(List<String> nestedNsdInfoIds) {
    this.nestedNsdInfoIds = nestedNsdInfoIds;
  }

  public NsdInfo archiveSecurityOption(ArchiveSecurityOptionEnum archiveSecurityOption) {
    this.archiveSecurityOption = archiveSecurityOption;
    return this;
  }

   /**
   * Signals the security option used by the NSD archive as defined in clause 5.1 of ETSI GS NFV SOL 007. Valid values: OPTION_1, OPTION_2 
   * @return archiveSecurityOption
  **/
  @Schema(description = "Signals the security option used by the NSD archive as defined in clause 5.1 of ETSI GS NFV SOL 007. Valid values: OPTION_1, OPTION_2 ")
  public ArchiveSecurityOptionEnum getArchiveSecurityOption() {
    return archiveSecurityOption;
  }

  public void setArchiveSecurityOption(ArchiveSecurityOptionEnum archiveSecurityOption) {
    this.archiveSecurityOption = archiveSecurityOption;
  }

  public NsdInfo signingCertificate(String signingCertificate) {
    this.signingCertificate = signingCertificate;
    return this;
  }

   /**
   * A string as defined in IETF RFC 8259. 
   * @return signingCertificate
  **/
  @Schema(description = "A string as defined in IETF RFC 8259. ")
  public String getSigningCertificate() {
    return signingCertificate;
  }

  public void setSigningCertificate(String signingCertificate) {
    this.signingCertificate = signingCertificate;
  }

  public NsdInfo artifacts(List<NsDescriptorsArtifacts> artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  public NsdInfo addArtifactsItem(NsDescriptorsArtifacts artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new ArrayList<>();
    }
    this.artifacts.add(artifactsItem);
    return this;
  }

   /**
   * Information about NSD archive artifacts contained in the NSD archive. This attribute shall not be present before the NSD archive content is on-boarded. Otherwise, this attribute shall be present if the NSD archive contains artifacts. 
   * @return artifacts
  **/
  @Schema(description = "Information about NSD archive artifacts contained in the NSD archive. This attribute shall not be present before the NSD archive content is on-boarded. Otherwise, this attribute shall be present if the NSD archive contains artifacts. ")
  public List<NsDescriptorsArtifacts> getArtifacts() {
    return artifacts;
  }

  public void setArtifacts(List<NsDescriptorsArtifacts> artifacts) {
    this.artifacts = artifacts;
  }

  public NsdInfo nsdOnboardingState(NsdOnboardingStateEnum nsdOnboardingState) {
    this.nsdOnboardingState = nsdOnboardingState;
    return this;
  }

   /**
   * The enumeration NsdOnboardingStateType shall comply with the provisions defined in Table 5.5.4.5-1 of GS NFV-SOL 005. It indicates the on-boarding state of the NSD. CREATED &#x3D; The NSD information object has been created. UPLOADING &#x3D; The associated NSD content is being uploaded. PROCESSING &#x3D; The associated NSD content is being processed, e.g. validation. ONBOARDED &#x3D; The associated NSD content has been on-boarded. ERROR &#x3D; There was an error during upload or processing of the NSD content. 
   * @return nsdOnboardingState
  **/
  @Schema(required = true, description = "The enumeration NsdOnboardingStateType shall comply with the provisions defined in Table 5.5.4.5-1 of GS NFV-SOL 005. It indicates the on-boarding state of the NSD. CREATED = The NSD information object has been created. UPLOADING = The associated NSD content is being uploaded. PROCESSING = The associated NSD content is being processed, e.g. validation. ONBOARDED = The associated NSD content has been on-boarded. ERROR = There was an error during upload or processing of the NSD content. ")
  public NsdOnboardingStateEnum getNsdOnboardingState() {
    return nsdOnboardingState;
  }

  public void setNsdOnboardingState(NsdOnboardingStateEnum nsdOnboardingState) {
    this.nsdOnboardingState = nsdOnboardingState;
  }

  public NsdInfo onboardingFailureDetails(InlineResponse400 onboardingFailureDetails) {
    this.onboardingFailureDetails = onboardingFailureDetails;
    return this;
  }

   /**
   * Get onboardingFailureDetails
   * @return onboardingFailureDetails
  **/
  @Schema(description = "")
  public InlineResponse400 getOnboardingFailureDetails() {
    return onboardingFailureDetails;
  }

  public void setOnboardingFailureDetails(InlineResponse400 onboardingFailureDetails) {
    this.onboardingFailureDetails = onboardingFailureDetails;
  }

  public NsdInfo nsdOperationalState(NsdOperationalStateEnum nsdOperationalState) {
    this.nsdOperationalState = nsdOperationalState;
    return this;
  }

   /**
   * The enumeration NsdOperationalStateType shall comply with the provisions defined in Table 5.5.4.3-1 of GS NFV_SOL 005. It indicates the operational state of the resource. ENABLED &#x3D; The operational state of the resource is enabled. DISABLED &#x3D; The operational state of the resource is disabled. 
   * @return nsdOperationalState
  **/
  @Schema(required = true, description = "The enumeration NsdOperationalStateType shall comply with the provisions defined in Table 5.5.4.3-1 of GS NFV_SOL 005. It indicates the operational state of the resource. ENABLED = The operational state of the resource is enabled. DISABLED = The operational state of the resource is disabled. ")
  public NsdOperationalStateEnum getNsdOperationalState() {
    return nsdOperationalState;
  }

  public void setNsdOperationalState(NsdOperationalStateEnum nsdOperationalState) {
    this.nsdOperationalState = nsdOperationalState;
  }

  public NsdInfo nsdUsageState(NsdUsageStateEnum nsdUsageState) {
    this.nsdUsageState = nsdUsageState;
    return this;
  }

   /**
   * The enumeration NsdUsageStateType shall comply with the provisions defined in Table 5.5.4.4-1 of GS NFV-SOL 005. It indicates the usage state of the resource.IN_USE &#x3D; The resource is in use.NOT_IN_USE &#x3D; The resource is not-in-use. 
   * @return nsdUsageState
  **/
  @Schema(required = true, description = "The enumeration NsdUsageStateType shall comply with the provisions defined in Table 5.5.4.4-1 of GS NFV-SOL 005. It indicates the usage state of the resource.IN_USE = The resource is in use.NOT_IN_USE = The resource is not-in-use. ")
  public NsdUsageStateEnum getNsdUsageState() {
    return nsdUsageState;
  }

  public void setNsdUsageState(NsdUsageStateEnum nsdUsageState) {
    this.nsdUsageState = nsdUsageState;
  }

  public NsdInfo userDefinedData(Object userDefinedData) {
    this.userDefinedData = userDefinedData;
    return this;
  }

   /**
   * This type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key- value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 7159. 
   * @return userDefinedData
  **/
  @Schema(description = "This type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key- value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 7159. ")
  public Object getUserDefinedData() {
    return userDefinedData;
  }

  public void setUserDefinedData(Object userDefinedData) {
    this.userDefinedData = userDefinedData;
  }

  public NsdInfo _links(NsDescriptorsLinks _links) {
    this._links = _links;
    return this;
  }

   /**
   * Get _links
   * @return _links
  **/
  @Schema(required = true, description = "")
  public NsDescriptorsLinks getLinks() {
    return _links;
  }

  public void setLinks(NsDescriptorsLinks _links) {
    this._links = _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NsdInfo inlineResponse201 = (NsdInfo) o;
    return Objects.equals(this.id, inlineResponse201.id) &&
        Objects.equals(this.nsdId, inlineResponse201.nsdId) &&
        Objects.equals(this.nsdName, inlineResponse201.nsdName) &&
        Objects.equals(this.nsdVersion, inlineResponse201.nsdVersion) &&
        Objects.equals(this.nsdDesigner, inlineResponse201.nsdDesigner) &&
        Objects.equals(this.nsdInvariantId, inlineResponse201.nsdInvariantId) &&
        Objects.equals(this.vnfPkgIds, inlineResponse201.vnfPkgIds) &&
        Objects.equals(this.pnfdInfoIds, inlineResponse201.pnfdInfoIds) &&
        Objects.equals(this.nestedNsdInfoIds, inlineResponse201.nestedNsdInfoIds) &&
        Objects.equals(this.archiveSecurityOption, inlineResponse201.archiveSecurityOption) &&
        Objects.equals(this.signingCertificate, inlineResponse201.signingCertificate) &&
        Objects.equals(this.artifacts, inlineResponse201.artifacts) &&
        Objects.equals(this.nsdOnboardingState, inlineResponse201.nsdOnboardingState) &&
        Objects.equals(this.onboardingFailureDetails, inlineResponse201.onboardingFailureDetails) &&
        Objects.equals(this.nsdOperationalState, inlineResponse201.nsdOperationalState) &&
        Objects.equals(this.nsdUsageState, inlineResponse201.nsdUsageState) &&
        Objects.equals(this.userDefinedData, inlineResponse201.userDefinedData) &&
        Objects.equals(this._links, inlineResponse201._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nsdId, nsdName, nsdVersion, nsdDesigner, nsdInvariantId, vnfPkgIds, pnfdInfoIds, nestedNsdInfoIds, archiveSecurityOption, signingCertificate, artifacts, nsdOnboardingState, onboardingFailureDetails, nsdOperationalState, nsdUsageState, userDefinedData, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse201 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nsdId: ").append(toIndentedString(nsdId)).append("\n");
    sb.append("    nsdName: ").append(toIndentedString(nsdName)).append("\n");
    sb.append("    nsdVersion: ").append(toIndentedString(nsdVersion)).append("\n");
    sb.append("    nsdDesigner: ").append(toIndentedString(nsdDesigner)).append("\n");
    sb.append("    nsdInvariantId: ").append(toIndentedString(nsdInvariantId)).append("\n");
    sb.append("    vnfPkgIds: ").append(toIndentedString(vnfPkgIds)).append("\n");
    sb.append("    pnfdInfoIds: ").append(toIndentedString(pnfdInfoIds)).append("\n");
    sb.append("    nestedNsdInfoIds: ").append(toIndentedString(nestedNsdInfoIds)).append("\n");
    sb.append("    archiveSecurityOption: ").append(toIndentedString(archiveSecurityOption)).append("\n");
    sb.append("    signingCertificate: ").append(toIndentedString(signingCertificate)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    nsdOnboardingState: ").append(toIndentedString(nsdOnboardingState)).append("\n");
    sb.append("    onboardingFailureDetails: ").append(toIndentedString(onboardingFailureDetails)).append("\n");
    sb.append("    nsdOperationalState: ").append(toIndentedString(nsdOperationalState)).append("\n");
    sb.append("    nsdUsageState: ").append(toIndentedString(nsdUsageState)).append("\n");
    sb.append("    userDefinedData: ").append(toIndentedString(userDefinedData)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
