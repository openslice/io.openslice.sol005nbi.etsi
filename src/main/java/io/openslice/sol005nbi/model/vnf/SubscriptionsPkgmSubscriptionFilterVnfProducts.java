/*
 * SOL005 - VNF Package Management Interface
 * SOL005 - VNF Package Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openslice.sol005nbi.model.vnf;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * SubscriptionsPkgmSubscriptionFilterVnfProducts
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-20T00:01:04.793+02:00[Europe/Athens]")
public class SubscriptionsPkgmSubscriptionFilterVnfProducts {
  @JsonProperty("vnfProductName")
  private String vnfProductName = null;

  @JsonProperty("versions")
  private List<SubscriptionsPkgmSubscriptionFilterVersions> versions = null;

  public SubscriptionsPkgmSubscriptionFilterVnfProducts vnfProductName(String vnfProductName) {
    this.vnfProductName = vnfProductName;
    return this;
  }

   /**
   * Name of the VNF product to match. 
   * @return vnfProductName
  **/
  @Schema(required = true, description = "Name of the VNF product to match. ")
  public String getVnfProductName() {
    return vnfProductName;
  }

  public void setVnfProductName(String vnfProductName) {
    this.vnfProductName = vnfProductName;
  }

  public SubscriptionsPkgmSubscriptionFilterVnfProducts versions(List<SubscriptionsPkgmSubscriptionFilterVersions> versions) {
    this.versions = versions;
    return this;
  }

  public SubscriptionsPkgmSubscriptionFilterVnfProducts addVersionsItem(SubscriptionsPkgmSubscriptionFilterVersions versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<>();
    }
    this.versions.add(versionsItem);
    return this;
  }

   /**
   * If present, match VNF packages that contain VNF products with certain versions and a certain product name, from one particular provider. 
   * @return versions
  **/
  @Schema(description = "If present, match VNF packages that contain VNF products with certain versions and a certain product name, from one particular provider. ")
  public List<SubscriptionsPkgmSubscriptionFilterVersions> getVersions() {
    return versions;
  }

  public void setVersions(List<SubscriptionsPkgmSubscriptionFilterVersions> versions) {
    this.versions = versions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionsPkgmSubscriptionFilterVnfProducts subscriptionsPkgmSubscriptionFilterVnfProducts = (SubscriptionsPkgmSubscriptionFilterVnfProducts) o;
    return Objects.equals(this.vnfProductName, subscriptionsPkgmSubscriptionFilterVnfProducts.vnfProductName) &&
        Objects.equals(this.versions, subscriptionsPkgmSubscriptionFilterVnfProducts.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vnfProductName, versions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionsPkgmSubscriptionFilterVnfProducts {\n");
    
    sb.append("    vnfProductName: ").append(toIndentedString(vnfProductName)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
